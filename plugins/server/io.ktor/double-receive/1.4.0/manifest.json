{
    "id": "double-receive",
    "name": "DoubleReceive",
    "version": "1.5.2",
    "ktor_version": "1.4.0",
    "short_description": "Allows ApplicationCall.receive several times",
    "github": "https://github.com/ktorio/ktor/blob/962677f73f0900cae32e90519fa1e850dd0acfa8/ktor-server/ktor-server-core/jvm/src/io/ktor/features/DoubleReceive.kt",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "Routing",
    "required_feature_ids": [
        "routing"
    ],
    "install_recipe": {
        "imports": [
            "io.ktor.features.*"
        ],
        "install_block": "install(DoubleReceive)",
        "templates": [
            {
                "position": "in_routing",
                "text": "post(\"/double-receive\") {\n    val first = call.receiveText()\n    val theSame = call.receiveText()\n    call.respondText(first + \" \" + theSame)\n}"
            }
        ]
    },
    "documentation": {
        "description": "DoubleReceive plugin provides the ability to invoke ApplicationCall.receive several times with no RequestAlreadyConsumedException exception. This usually makes sense when a plugin is consuming a request body so a handler is unable to receive it again.",
        "usage": "Install DoubleReceive plugin into the ApplicationCall\n\n```kotlin\ninstall(DoubleReceive)\n\n```\nAfter that you can receive from a call multiple times and every invocation may return the same instance.\n\n```kotlin\nval first = call.receiveText()\nval theSame = call.receiveText()\n\n```\nTypes that could be always received twice with this plugin are: ByteArray, String and Parameters and all types provided by ContentNegotiation plugin (for example, objects deserialized from JSON payloads).\n\nReceiving different types from the same call is not guaranteed to work without receiveEntireContent but may work in some specific cases. For example, receiving a text after receiving a byte array always works.\n\nWhen receiveEntireContent is enabled, then receiving different types should always work. Also double receive of a channel or stream works as well. However, receive executes the whole receive pipeline from the beginning so all content transformations and converters are executed every time that may be slower than with the option disabled.##Custom types\nIf a custom content transformation is installed (for example, by intercepting receive pipeline), then a transformed value couldn't be re-received without receiveEntireContent option by default. However it is possible to mark a transformed value object as reusable by specifying reusableValue option:\n\n```kotlin\nval converted = .... // convert somehow from a request payload\nproceedWith(ApplicationReceiveRequest(receive.typeInfo, converted, reusableValue = true))\n\n```",
        "options": "*receiveEntireContent : When enabled, for every request the whole content will be received and stored as a byte array. This is useful when completely different types need to be received. You also can receive streams and channels. Note that enabling this causes the whole receive pipeline to be executed for every further receive pipeline."
    }
}