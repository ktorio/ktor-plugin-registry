{
    "id": "ktor-locations",
    "name": "Locations",
    "version": "1.5.2",
    "ktor_version": "1.4.0",
    "until_ktor_version": "1.6.8",
    "short_description": "Allows to define route locations in a typed way",
    "github": "https://github.com/ktorio/ktor/tree/4a50c76c3264b0121b91a203d38473bb4aafbace/ktor-features/ktor-locations/jvm/src/io/ktor/locations",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "Routing",
    "required_feature_ids": [
        "routing"
    ],
    "install_recipe": {
        "imports": [
            "io.ktor.locations.*"
        ],
        "test_imports": [
            "io.ktor.locations.*"
        ],
        "install_block": "install(Locations) {\n}",
        "templates": [
            {
                "position": "in_routing",
                "text": "get<MyLocation> {\n        call.respondText(\"Location: name=${it.name}, arg1=${it.arg1}, arg2=${it.arg2}\")\n    }\n    // Register nested routes\n    get<Type.Edit> {\n        call.respondText(\"Inside $it\")\n    }\n    get<Type.List> {\n        call.respondText(\"Inside $it\")\n    }"
            },
            {
                "position": "outside_app",
                "text": "@Location(\"/location/{name}\")\nclass MyLocation(val name: String, val arg1: Int = 42, val arg2: String = \"default\")"
            },
            {
                "position": "outside_app",
                "text": "@Location(\"/type/{name}\") data class Type(val name: String) {\n    @Location(\"/edit\")\n    data class Edit(val type: Type)\n\n    @Location(\"/list/{page}\")\n    data class List(val type: Type, val page: Int)\n}"
            }
        ]
    },
    "dependencies": [
        {
            "group": "io.ktor",
            "artifact": "ktor-locations",
            "version": "$ktor_version"
        }
    ],
    "documentation": {
        "description": "Ktor provides a mechanism to create routes in a typed way, for both: constructing URLs and reading the parameters.\n\n",
        "usage": "## Installation\nThe Locations plugin doesn't require any special configuration:\n\n```kotlin\ninstall(Locations)\n```\n## Defining route classes\nFor each typed route you want to handle, you need to create a class (usually a data class) containing the parameters that you want to handle.\n\nThe parameters must be of any type supported by the `Data Conversion` plugin. By default, you can use `Int`, `Long`, `Float`, `Double`, `Boolean`, `String`, enums and `Iterable` as parameters.\n\n### URL parameters\nThat class must be annotated with `@Location` specifying a path to match with placeholders between curly brackets `{` and `}`. For example: `{propertyName}`. The names between the curly braces must match the properties of the class.\n\n```kotlin\n@Location(\"/list/{name}/page/{page}\")\ndata class Listing(val name: String, val page: Int)\n```\n* Will match: `/list/movies/page/10`\n* Will construct: `Listing(name = \"movies\", page = 10)`\n\n### GET parameters\nIf you provide additional class properties that are not part of the path of the `@Location`, those parameters will be obtained from the `GET`'s query string or `POST` parameters:\n\n```kotlin\n@Location(\"/list/{name}\")\ndata class Listing(val name: String, val page: Int, val count: Int)\n```\n* Will match: `/list/movies?page=10&count=20`\n* Will construct: `Listing(name = \"movies\", page = 10, count = 20)`\n\n## Defining route handlers\nOnce you have defined the classes annotated with `@Location`, this plugin artifact exposes new typed methods for defining route handlers: `get`, `options`, `header`, `post`, `put`, `delete` and `patch`.\n\n```kotlin\nrouting {\n    get<Listing> { listing ->\n        call.respondText(\"Listing ${listing.name}, page ${listing.page}\")\n    }\n}\n```\n## Building URLs\nYou can construct URLs to your routes by calling `application.locations.href` with an instance of a class annotated with `@Location`:\n\n```kotlin\nval path = application.locations.href(Listing(name = \"movies\", page = 10, count = 20))\n```\nSo for this class, `path` would be `\"/list/movies?page=10&count=20\"`.\n\n```kotlin\n@Location(\"/list/{name}\") data class Listing(val name: String, val page: Int, val count: Int)\n```\nIf you construct the URLs like this, and you decide to change the format of the URL, you will just have to update the `@Location` path, which is really convenient.\n\n## Subroutes with parameters\nYou have to create classes referencing to another class annotated with `@Location` like this, and register them normally:\n\n```kotlin\nrouting {\n    get<Type.Edit> { typeEdit -> // /type/{name}/edit\n        // ...\n    }\n    get<Type.List> { typeList -> // /type/{name}/list/{page}\n        // ...\n    }\n}\n```\nTo obtain parameters defined in the superior locations, you just have to include those property names in your classes for the internal routes. For example:\n\n```kotlin\n@Location(\"/type/{name}\") data class Type(val name: String) {\n\t// In these classes we have to include the `name` property matching the parent.\n\t@Location(\"/edit\") data class Edit(val parent: Type)\n\t@Location(\"/list/{page}\") data class List(val parent: Type, val page: Int)\n}\n```\n",
        "options": "No options"
    }
}