{
    "id": "content-negotiation",
    "name": "Content Negotiation",
    "version": "1.5.2",
    "ktor_version": "1.4.0",
    "short_description": "Provides automatic content conversion according to Content-Type and Accept headers.",
    "github": "https://github.com/ktorio/ktor/blob/4517e3856a3cae8f157d2f6966635217827d2abd/ktor-server/ktor-server-core/jvm/src/io/ktor/features/ContentNegotiation.kt",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "HTTP",
    "required_feature_ids": [
        "routing"
    ],
    "documentation": {
        "description": "The `ContentNegotiation` plugin serves two primary purposes:\n* Negotiating media types between the client and server. For this, it uses the `Accept` and `Content-Type` headers.\n* Serializing/deserializing the content in the specific format, which is provided by either the built-in `kotlinx.serialization` library or external ones, such as `Gson` and `Jackson`, amongst others.\n\n",
        "usage": "## Installation\nTo install the `ContentNegotiation` plugin, pass it to the `install` function in the application initialization code. This can be the `main` function ...\n\n```kotlin\nimport io.ktor.features.*\n// ...\nfun Application.main() {\n  install(ContentNegotiation)\n  // ...\n}\n```\n... or a specified `module`:\n\n```kotlin\nimport io.ktor.features.*\n// ...\nfun Application.module() {\n    install(ContentNegotiation)\n    // ...\n}\n```\n## Register a Converter\nTo register a converter for a specified `Content-Type`, you need to call the register method. In the example below, two custom converters are registered to deserialize `application/json` and `application/xml` data:\n\n```kotlin\ninstall(ContentNegotiation) {\n    register(ContentType.Application.Json, CustomJsonConverter())\n    register(ContentType.Application.Xml, CustomXmlConverter())\n}\n```\n### Built-in Converters\nKtor provides the set of built-in converters for handing various content types without writing your own logic:\n\n* `Gson` for JSON\n\n* `Jackson` for JSON\n\n* `kotlinx.serialization` for JSON, Protobuf, CBOR, and so on\n\nSee a corresponding topic to learn how to install the required dependencies, register, and configure a converter.\n\n## Receive and Send Data\n### Create a Data Class\nTo deserialize received data into an object, you need to create a data class, for example:\n\n```kotlin\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\nIf you use `kotlinx.serialization`, make sure that this class has the `@Serializable` annotation:\n\n```kotlin\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n\n### Receive Data\nTo receive and convert a content for a request, call the `receive` method that accepts a data class as a parameter:\n\n```kotlin\npost(\"/customer\") {\n    val customer = call.receive<Customer>()\n}\n```\nThe `Content-Type` of the request will be used to choose a converter for processing the request. The example below shows a sample HTTP client request containing JSON data that will be converted to a `Customer` object on the server side:\n\n```kotlin\npost http://0.0.0.0:8080/customer\nContent-Type: application/json\n\n{\n  \"id\": 1,\n  \"firstName\" : \"Jet\",\n  \"lastName\": \"Brains\"\n}\n```\n### Send Data\nTo pass a data object in a response, you can use the `respond` method:\n\n```kotlin\npost(\"/customer\") {\n    call.respond(Customer(1, \"Jet\", \"Brains\"))\n}\n```\nIn this case, Ktor uses the `Accept` header to choose the required converter.\n\n## Implement a Custom Converter\nIn Ktor, you can write your own converter for serializing/deserializing data. To do this, you need to implement the `ContentConverter` interface:\n\n```kotlin\ninterface ContentConverter {\n    suspend fun convertForSend(context: PipelineContext<Any, ApplicationCall>, contentType: ContentType, value: Any): Any?\n    suspend fun convertForReceive(context: PipelineContext<ApplicationReceiveRequest, ApplicationCall>): Any?\n}\n```\nTake a look at the [GsonConverter](https://github.com/ktorio/ktor/blob/master/ktor-features/ktor-gson/jvm/src/io/ktor/gson/GsonSupport.kt) class as an implementation example.\n\n",
        "options": "No options"
    }
}