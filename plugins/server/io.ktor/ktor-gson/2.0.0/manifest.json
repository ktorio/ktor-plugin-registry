{
    "id": "ktor-gson",
    "name": "GSON",
    "version": "2.0.0",
    "ktor_version": "2.0.0",
    "short_description": "Handles JSON serialization using GSON library",
    "github": "https://github.com/ktorio/ktor/blob/192286740d912cc4767cbbf43d3951ba86eb7a41/ktor-features/ktor-gson/jvm/src/io/ktor/gson/GsonSupport.kt",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "Serialization",
    "required_feature_ids": [
        "content-negotiation"
    ],
    "install_recipe": {
        "imports": [
            "io.ktor.serialization.gson.*",
            "io.ktor.server.plugins.contentnegotiation.*",
            "io.ktor.server.response.*"
        ],
        "templates": [
            {
                "position": "in_routing",
                "text": "get(\"/json/gson\") {\n        call.respond(mapOf(\"hello\" to \"world\"))\n    }"
            },
            {
                "position": "serialization_config",
                "text": "gson {\n    }"
            }
        ]
    },
    "dependencies": [
        {
            "group": "io.ktor",
            "artifact": "ktor-serialization-gson-jvm",
            "version": "$ktor_version"
        }
    ],
    "documentation": {
        "description": "The [Gson](https://ktor.io/docs/serialization.html) plugin provides the ability to serialize/deserialize the JSON content by using the Gson serialization library. Note that this plugin depends on the `ContentNegotiation` plugin, which is used to negotiate media types between the client and server using the `Accept` and `Content-Type` headers.",
        "usage": "To install `ContentNegotiation` and register the Gson serializer in your application, call the `gson` method:\n```kotlin\ninstall(ContentNegotiation) {\n    gson()\n}\n```\nThis allows you to deserialize received JSON data to an object of a specific class. For example, if you have the following data class, ...\n```kotlin\ndata class Customer(val id: Int, val firstName: String, val lastName: String)\n```\n... you need to pass it to the `receive` method as a parameter to convert JSON data to an object:\n```kotlin\npost(\"/customer\") {\n    val customer = call.receive<Customer>()\n    customerStorage.add(customer)\n    call.respondText(\"Customer stored correctly\", status = HttpStatusCode.Created)\n}\n```\nTo learn more, see [Content negotiation and serialization](https://ktor.io/docs/serialization.html).",
        "options": ""
    }
}