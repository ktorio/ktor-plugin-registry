{
    "id": "conditional-headers",
    "name": "Conditional Headers",
    "version": "1.5.2",
    "ktor_version": "1.4.0",
    "short_description": "Avoids sending content if the client already has the same content using ETag or LastModified",
    "github": "https://github.com/ktorio/ktor/blob/4517e3856a3cae8f157d2f6966635217827d2abd/ktor-server/ktor-server-core/jvm/src/io/ktor/features/ConditionalHeaders.kt",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "HTTP",
    "install_recipe": {
        "imports": [
            "io.ktor.features.*"
        ],
        "install_block": "install(ConditionalHeaders)"
    },
    "documentation": {
        "description": "ConditionalHeaders plugin adds the ability to avoid sending content if the client already has the same content. It does so by checking the `ETag` or `LastModified` properties of the `Resource` or `FinalContent` that are sent and comparing these properties to what client indicates it is having. If the conditions allow it, the entire content is not sent and a `\"304 Not Modified\"` response is sent instead.\n\n",
        "usage": "## Configuration\nYou can install and use `ConditionalHeaders` without additional configuration:\n\n```kotlin\ninstall(ConditionalHeaders)\n\n```\nIt also allows to configure a lambda to fetch a version list from the generated `OutgoingContent` passed as parameter of the lambda:\n\n```kotlin\ninstall(ConditionalHeaders) {\n    version { content -> listOf(EntityTagVersion(\"tag1\")) }\n}\n\n```\n## Extensibility\n`Version` interface implementations are attached to the `Resource` instances, and you can return custom implementations with your own logic. Please note that `FinalContent` is only checked for ETag and LastModified headers.",
        "options": "* version"
    }
}