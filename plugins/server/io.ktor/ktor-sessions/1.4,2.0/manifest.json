{
    "id": "ktor-sessions",
    "name": "Sessions",
    "version": "1.5.2",
    "ktor_version": "1.4.0",
    "short_description": "Adds supports for sessions: with the payload in the client or the server",
    "github": "https://github.com/ktorio/ktor/blob/8c5ed12666b535d88277f5307b3eb286151b18af/ktor-server/ktor-server-core/jvm/src/io/ktor/sessions/Sessions.kt",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "Security",
    "required_feature_ids": [
        "routing"
    ],
    "install_recipe": {
        "imports": [
            "io.ktor.sessions.*"
        ],
        "install_block": "data class MySession(val count: Int = 0)\ninstall(Sessions) {\n    cookie<MySession>(\"MY_SESSION\") {\n        cookie.extensions[\"SameSite\"] = \"lax\"\n    }\n}",
        "templates": [
            {
                "position": "in_routing",
                "text": "get(\"/session/increment\") {\n        val session = call.sessions.get<MySession>() ?: MySession()\n        call.sessions.set(session.copy(count = session.count + 1))\n        call.respondText(\"Counter is ${session.count}. Refresh to increment.\")\n    }"
            }
        ]
    },
    "dependencies": [
        {
            "group": "io.ktor",
            "artifact": "ktor-server-sessions",
            "version": "$ktor_version"
        }
    ],
    "documentation": {
        "description": "Sessions provide a mechanism to persist data between different HTTP requests. Typical use cases include storing a logged-in user's ID, the contents of a shopping basket, or keeping user preferences on the client. In Ktor, you can implement sessions by using cookies or custom headers, choose whether to store session data on the server or pass it to the client, sign and encrypt session data, and more.\n\nYou can configure sessions in the following ways:\n* `How to pass data between the server and client`: using cookies or custom headers. Cookies suit better for plain HTML applications while custom headers are intended for APIs.\n* `Where to store the session payload`: on the client or server. You can pass the serialized session's data to the client using a cookie/header value or store the payload on the server and pass only a session ID.\n* `How to serialize session data`: using a default format, JSON, or a custom engine.\n* `Where to store the payload on the server`: in memory, in a folder, or Redis. You can also implement a custom storage for keeping session data.\n* `How to transform the payload`: you can sign or encrypt data sent to the client for security reasons.",
        "usage": "## Installation\nBefore installing a session, you need to create a `data class` for storing session data, for example:\n\n```kotlin\ndata class LoginSession(val username: String, val count: Int)\n```\nYou need to create several data classes if you are going to use several sessions.\n\nAfter creating the required data classes, you can install the `Sessions` plugin by passing it to the `install` function in the application initialization code. Inside the `install` block, call the `cookie` or `header` function depending on how you want to pass data between the server and client:\n```kotlin\nimport io.ktor.features.*\nimport io.ktor.sessions.*\n// ...\nfun Application.module() {\n    install(Sessions) {\n        cookie<LoginSession>(\"LOGIN_SESSION\")\n    }\n}\n```\nYou can now set the session content, modify the session, or clear it.\n\n### Multiple Sessions\nIf you need several sessions in your application, you need to create a separate data class for each session. For example, you can create separate data classes for storing a user login and settings:\n\n```kotlin\ndata class LoginSession(val username: String, val count: Int)\ndata class SettingsSession(val username: String, val settings: Settings)\n```\nYou can store a username on the server in a directory storage and pass user preferences to the client.\n\n```kotlin\ninstall(Sessions) {\n    cookie<LoginSession>(\"LOGIN_SESSION\", directorySessionStorage(File(\".sessions\"), cached = true))\n    cookie<SettingsSession>(\"SETTINGS_SESSION\")\n}\n```\nNote that session names should be unique.\n\n## Set Session Content\nTo set the session content for a specific `route`, use the `call.sessions` property. The set method allows you to create a new session instance:\n\n```kotlin\nrouting {\n    get(\"/\") {\n        call.sessions.set(LoginSession(name = \"John\", value = 1))\n    }\n}\n```\nTo get the session content, you can call `get` receiving one of the registered session types as type parameter:\n\n```kotlin\nrouting {\n    get(\"/\") {\n        val loginSession: LoginSession? = call.sessions.get<LoginSession>()\n    }\n}\n```\nTo modify a session, for example, to increment a counter, you need to call the copy method of the data class:\n\n```kotlin\nval loginSession = call.sessions.get<LoginSession>() ?: LoginSession(username = \"Initial\", count = 0)\ncall.sessions.set(session.copy(value = loginSession.count + 1))\n```\nWhen you need to clear a session for any reason (for example, when a user logs out), call the clear function:\n\n```kotlin\ncall.sessions.clear<LoginSession>()\n```\n",
        "options": "* `cookie` -- defines a session for a specific cookie name"
    }
}