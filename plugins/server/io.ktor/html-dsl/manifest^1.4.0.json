{
    "id": "html-dsl",
    "name": "HTML DSL",
    "version": "1.5.2",
    "ktor_version": "1.4.0",
    "short_description": "Generate HTML using Kotlin code like a pure-core template engine",
    "github": "https://github.com/Kotlin/kotlinx.html",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "Templating",
    "required_feature_ids": [
        "routing"
    ],
    "install_recipe": {
        "imports": [
            "io.ktor.html.*",
            "kotlinx.html.*"
        ],
        "install_block": "",
        "templates": [
            {
                "position": "in_routing",
                "text": "get(\"/html-dsl\") {\n    call.respondHtml {\n        body {\n            h1 { +\"HTML\" }\n            ul {\n                for (n in 1..10) {\n                    li { +\"$n\" }\n                }\n            }\n        }\n    }\n}"
            }
        ]
    },
    "dependencies": [
        {
            "group": "io.ktor",
            "artifact": "ktor-html-builder",
            "version": "$ktor_version"
        }
    ],
    "documentation": {
        "description": "HTML DSL integrates the `kotlinx.html` library into Ktor and allows you to respond to a client with HTML blocks. With HTML DSL, you can write pure HTML in Kotlin, interpolate variables into views, and even build complex HTML layouts using templates.\n\n",
        "usage": "## Send HTML in Response\nTo send an HTML response, call the `ApplicationCall.respondHtml` method inside the required route:\n\n```kotlin\nget(\"/\") {\n    val name = \"Ktor\"\n    call.respondHtml {\n        head {\n            title {\n                +name\n            }\n        }\n        body {\n            h1 {\n                +\"Hello from $name!\"\n            }\n        }\n    }\n}\n```\nIn this case, the following HTML will be sent to the client:\n\n```html\n<head>\n    <title>Ktor</title>\n</head>\n<body>\n    <h1>Hello from Ktor!</h1>\n</body>\n```\nTo learn more about generating HTML using kotlinx.html, see the [kotlinx.html wiki](https://github.com/Kotlin/kotlinx.html/wiki).\n\n## Templates\nIn addition to generating plain HTML, Ktor provides a template engine that can be used to build complex layouts. You can create a hierarchy of templates for different parts of an HTML page, for example, a root template for the entire page, child templates for a page header and footer, and so on. Ktor exposes the following API for working with templates:\n1. To respond with an HTML built based on a specified template, call the `ApplicationCall.respondHtmlTemplate` method.\n2. To create a template, you need to implement the `Template` interface and override the `Template.apply` method providing HTML.\n3. Inside a created template class, you can define placeholders for different content types:\n* `Placeholder` is used to insert the content. `PlaceholderList` can be used to insert the content that appears multiple times (for example, list items).\n* `TemplatePlaceholder` can be used to insert child templates and create nested layouts.\n\n### Example\nLet's see the example of how to create a hierarchical layout using templates. Imagine we have the following HTML:\n\n```html\n<body>\n<h1>Ktor</h1>\n<article>\n    <h2>Hello from Ktor!</h2>\n    <p>Kotlin Framework for creating connected systems.</p>\n</article>\n</body>\n```\nWe can split the layout of this page into two parts:\n* A root layout template for a page header and a child template for an article.\n* A child template for the article content.\n\nLet's implement these layouts step-by-step:\n\n1. Call the `respondHtmlTemplate` method and pass a template class as a parameter. In our case, this is the `LayoutTemplate` class that should implement the `Template` interface:\n\n```kotlin\nget(\"/\") {\n    call.respondHtmlTemplate(LayoutTemplate()) {\n        // ...\n    }\n}\n```\nInside the block, we will be able to access a template and specify its property values. These values will substitute placeholders specified in a template class. We'll create LayoutTemplate and define its properties in the next step.\n\n2. A root layout template will look in the following way:\n\n```kotlin\nclass LayoutTemplate: Template<HTML> {\n    val header = Placeholder<FlowContent>()\n    val content = TemplatePlaceholder<ContentTemplate>()\n    override fun HTML.apply() {\n        body {\n            h1 {\n                insert(header)\n            }\n            insert(ContentTemplate(), content)\n        }\n    }\n}\n```\nThe class exposes two properties:\n* The `header` property specifies a content inserted within the h1 tag.\n* The `content` property specifies a child template for article content.\n\n3. A child template will look as follows:\n\n```kotlin\nclass ContentTemplate: Template<FlowContent> {\n    val articleTitle = Placeholder<FlowContent>()\n    val articleText = Placeholder<FlowContent>()\n    override fun FlowContent.apply() {\n        article {\n            h2 {\n                insert(articleTitle)\n            }\n            p {\n                insert(articleText)\n            }\n        }\n    }\n}\n```\nThis template exposes the `articleTitle` and `articleText` properties, whose values will be inserted inside the `article`.\n\n4. Now we are ready to send HTML built using the specified property values:\n\n```kotlin\nget(\"/\") {\n    call.respondHtmlTemplate(LayoutTemplate()) {\n        header {\n            +\"Ktor\"\n        }\n        content {\n            articleTitle {\n                +\"Hello from Ktor!\"\n            }\n            articleText {\n                +\"Kotlin Framework for creating connected systems.\"\n            }\n        }\n    }\n}\n```\n",
        "options": "No options"
    }
}