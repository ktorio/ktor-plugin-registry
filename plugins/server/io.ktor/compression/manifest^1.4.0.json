{
    "id": "compression",
    "name": "Compression",
    "version": "1.5.2",
    "ktor_version": "1.4.0",
    "short_description": "Compress outgoing content using gzip, deflate or custom encoder and thus reduce the size of the response",
    "github": "https://github.com/ktorio/ktor/blob/4517e3856a3cae8f157d2f6966635217827d2abd/ktor-server/ktor-server-core/jvm/src/io/ktor/features/Compression.kt",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "HTTP",
    "install_recipe": {
        "imports": [
            "io.ktor.features.*"
        ],
        "install_block": "install(Compression) {\n    gzip {\n        priority = 1.0\n    }\n    deflate {\n        priority = 10.0\n        minimumSize(1024) // condition\n    }\n}"
    },
    "documentation": {
        "description": "`Compression` plugin adds the ability to compress outgoing content using `gzip`, `deflate` or ``custom` encoder and thus reduce the size of the response.",
        "usage": "## Installation\n\n```kotlin\ninstall(Compression)\n\n```\n## Configuration\nWhen the configuration block is omitted, the default configuration is used. It includes the following encoders:\n\n* gzip\n\n* deflate\n\n* identity\n\nIf you want to select specific encoders you need to provide a configuration block:\n\n```kotlin\ninstall(Compression) {\n    gzip()\n}\n\n```\nEach encoder can be configured with a priority and some conditions:\n\n```kotlin\ninstall(Compression) {\n    gzip {\n        priority = 1.0\n    }\n    deflate {\n        priority = 10.0\n        minimumSize(1024) // condition\n    }\n}\n\n```\nEncoders are sorted by specified quality in an `Accept-Encoding` header in the HTTP request, and then by specified priority. First encoder that satisfies all conditions wins.\n\nIn the example above when `Accept-Encoding` doesn't specify quality, `gzip` will be selected for all contents less than `1K` in size, and all the rest will be encoded with `deflate` encoder.\n\nSome typical conditions are readily available:\n\n* `minimumSize` – minimum size of the response to compress\n\n* `matchContentType` – one or more content types that should be compressed\n\n* `excludeContentType` – do not compress these content types\n\nYou can also use a custom condition by providing a predicate:\n\n```kotlin\ngzip {\n    condition {\n        parameters[\"e\"] == \"1\"\n    }\n}\n\n```\n## Security with HTTPS\nHTTPS with any kind of compression is vulnerable to the BREACH attack. This kind of attack allows a malicious attacker to guess a secret (like a session, an auth token, a password, or a credit card) from an encrypted `HTTPS` page in less than a minute.\n\nYou can mitigate this attack by:\n\n* Completely turn off HTTP compression (which might affect performance).\n* Not placing user input (`GET`, `POST` or `Header/Cookies` parameters) as part of the response (either `Headers` or `Bodies`) mixed with secrets (including a `Set-Cookie` with a `session_id`).\n* Add a random amount of bytes to the output for example in an html page, you can just add `<!-- 100~500 random_bytes !-->` making it much harder to guess the secret for an attacker in a reasonable time.\n* Ensure that your website is completely `HTTPS` and has `HSTS` enabled, and adding a conditional header checking the Referrer page. (If you have a single page without `HTTPS`, the malicious attacker can use that page to inject code using the same domain as Referrer).\n* Adding `CSRF` protection to your pages.\n\n```kotlin\napplication.install(Compression) {\n    gzip {\n        condition {\n            // @TODO: Check: this is only effective if your website is completely HTTPS and has HSTS enabled.\n            request.headers[HttpHeaders.Referrer]?.startsWith(\"https://my.domain/\") == true\n        }\n    }\n}\n\n```\n## Extensibility\nYou can provide your own encoder by implementing the `CompressionEncoder` interface and providing a configuration function. Since content can be provided as a `ReadChannel` or `WriteChannel`, it should be able to compress in both ways. See `GzipEncoder` as an example of an encoder.",
        "options": "* gzip\n* deflate\n* custom\n"
    }
}