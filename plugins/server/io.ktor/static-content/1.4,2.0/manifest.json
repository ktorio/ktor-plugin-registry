{
    "id": "static-content",
    "name": "Static Content",
    "version": "1.5.2",
    "ktor_version": "1.4.0",
    "short_description": "Serves static files from defined locations.",
    "github": "https://github.com/ktorio/ktor/blob/7e78e715cec3ff039cd628f8ff8ce875c35cde4c/ktor-server/ktor-server-core/jvm/src/io/ktor/http/content/StaticContent.kt",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "Routing",
    "required_feature_ids": [
        "routing"
    ],
    "install_recipe": {
        "imports": [
            "io.ktor.http.content.*"
        ],
        "install_block": "",
        "templates": [
            {
                "position": "in_routing",
                "text": "// Static plugin. Try to access `/static/index.html`\nstatic(\"/static\") {\n    resources(\"static\")\n}"
            },
            {
                "position": "resources",
                "name": "static/index.html",
                "text": "<html>\n <head>\n </head>\n <body>\n   <h1>Hello Ktor!</h1>\n </body>\n</html>"
            }
        ]
    },
    "dependencies": [
        {
            "group": "io.ktor",
            "artifact": "ktor-server-host-common",
            "version": "$ktor_version"
        }
    ],
    "documentation": {
        "description": "Ktor has built-in support for serving static content. This can come in useful when you want to serve style sheets, scripts, images, etc.\n\n",
        "usage": "Whether we're creating a website or an HTTP endpoint, many applications need to serve files (such as stylesheets, scripts, images, etc.), \nWhile it is certainly possible with Ktor to load the contents of a file and send it in response to a request,\ngiven this is such a common functionality, Ktor simplifies the entire process for us with the `static` plugin.\n\nThe first step in defining a static route is to \ndefine the path under which the content should be served. For instance, if you want everything under the route `assets` to be treated as static content, you need to add the following\nto your application setup:\n\n```kotlin\nrouting {\n    static(\"assets\") {\n\n    }\n}\n```\n\nThe next step is to define where we want the content to be served from, which can be either\n\n* [A folder](Serving_Static_Content.md#folders) \n* [Embedded application resources](Serving_Static_Content.md#embedded-application-resources)\n\n## Folders\n\nIn order to serve the contents from a folder, we need to specify the folder name using the `files` function. The path is **always relative to the application path**:\n\n```kotlin\nrouting {\n    static(\"assets\") {\n      files(\"css\")\n    }\n}\n```\n\n`files(\"css\")` would then allow for any file located in the folder `css` to be served as static content under the given\nURL pattern, which in this case is `assets`. This means that a request to\n\n`/assets/stylesheet.css` would serve the file `/css/stylesheet.css` \n\nWe can have as many folders as we like under a single path. For instance the following would also be valid:\n\n```kotlin\nrouting {\n    static(\"assets\") {\n      files(\"css\")\n      files(\"js\")\n    }\n}\n```\n\n### Serving individual files\n\nIn addition to serving files from folders, we can also specify individuals files we would like to make available by \nusing the `file` function. Optionally this takes a second argument which allows us to map a physical filename to a virtual one:\n\n```kotlin\nrouting {\n    static(\"static\") {\n        file(\"image.png\")\n        file(\"random.txt\", \"image.png\")\n    }\n}\n```\n\n### Defining a default file\n\nFor a specific path, we can also define the default file to be loaded:\n\n```kotlin\nrouting {\n    static(\"assets\") {\n      files(\"css\")\n      default(\"index.html\")\n    }\n}\n```\n \nwhich would cause a request to `/assets/` to serve `index.html`. \n\n### Changing the default root folder\n\nKtor also provides us the ability to specify a different root folder from where contents is served. This is useful for instance\nif we want to dynamically define where contents should be served from, or even use absolute paths.\n\nWe can do this by setting the value of the `staticRootFolder` property: \n\n```kotlin\nstatic(\"docs\") {\n    staticRootFolder = File(\"/system/folder/docs\")\n    files(\"public\")\n}\n```\n\nwhich would then map any request to `/docs` to the physical folder `/system/folder/docs/public`.\n\n## Embedded Application Resources\n\nWe can embed content as resources in our applications and serve these using the `resource` and `resources` functions:\n\n```kotlin\nstatic(\"assets\") {\n    resources(\"css\")\n}\n```\n\n`resources(\"css\")` would then allow for any file located under the resource `css` to be served as static content under the given\nURL pattern, which in this case is `assets`. This means that a request to\n\n`/assets/stylesheet.cs` would serve the file `/css/stylesheet.cs` \n\nWe can have as many resources as we like under a single path. For instance the following would also be valid:\n\n```kotlin\nrouting {\n    static(\"assets\") {\n      resources(\"css\")\n      resources(\"js\")\n    }\n}\n```\n\n### Serving individual resources\n\nIn addition to serving files from resources, we can also specify individuals files we would like to make available by \nusing the `resource` function. Optionally this takes a second argument which allows us to map a physical filename to a virtual one:\n\n```kotlin\nrouting {\n    static(\"static\") {\n        resource(\"image.png\")\n        resource(\"random.txt\", \"image.png\")\n    }\n}\n```\n### Defining a default resource\n\nFor a specific path, we can also define the default file to be loaded:\n\n```kotlin\nrouting {\n    static(\"assets\") {\n      resources(\"css\")\n      defaultResource(\"index.html\")\n    }\n}\n```\n\n### Changing the default resource package\n\nKtor also provides us the ability to specify a different base resource package from where contents is served.\n\nWe can do this by setting the value of the `staticBasePackage` property: \n\n```kotlin\nstatic(\"docs\") {\n    staticBasePackage = File(\"/system/folder/docs\")\n    files(\"public\")\n}\n```\n\n## Sub-routes\n\nIf we want to have sub-routes, we can nest `static` functions:\n\n```kotlin\nstatic(\"assets\") {\n    files(\"css\")\n    static(\"themes\") {\n        files(\"data\")\n    }\n}\n```\n\nallowing for `/assets/themes` to load files from the `/data` \n\n## Handling errors\n\nIf the request content is not found, Ktor will automatically respond with a `404 Not Found` HTTP status code. For more information about \npersonalising error handling, please see [status pages](status_pages.md)\n\n## Customising Content Type header\n\nKtor automatically looks up the content type of a file based on its extension and sets the appropriate `Content-Type` header. The list of supported MIME types \nis defined in the `mimelist.csv` resource file located in `ktor-server-core` artifact. ",
        "options": "No options"
    }
}