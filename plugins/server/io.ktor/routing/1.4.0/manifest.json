{
    "id": "routing",
    "name": "Routing",
    "version": "1.5.2",
    "ktor_version": "1.4.0",
    "short_description": "Allows to define structured routes and associated handlers.",
    "github": "https://github.com/ktorio/ktor/blob/4517e3856a3cae8f157d2f6966635217827d2abd/ktor-server/ktor-server-core/jvm/src/io/ktor/routing/Routing.kt",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "Routing",
    "install_recipe": {
        "imports": [
            "io.ktor.routing.*",
            "io.ktor.http.*"
        ],
        "test_imports": [
            "io.ktor.client.request.*",
            "io.ktor.client.statement.*",
            "io.ktor.http.*",
            "io.ktor.server.testing.*",
            "kotlin.test.*"
        ],
        "templates": [
            {
                "position": "in_routing",
                "text": "get(\"/\") {\n    call.respondText(\"Hello World!\")\n}"
            },
            {
                "position": "test_function",
                "text": "@Test\nfun testRoot() {\n    withTestApplication({ configureRouting() }) {\n        handleRequest(HttpMethod.Get, \"/\").apply {\n            assertEquals(HttpStatusCode.OK, response.status())\n            assertEquals(\"Hello World!\", response.content)\n        }\n    }\n}"
            }
        ]
    },
    "dependencies": [
        {
            "group": "io.ktor",
            "artifact": "ktor-server-core",
            "version": "$ktor_version"
        }
    ],
    "documentation": {
        "description": "Routing is a plugin that is installed into an Application to simplify and structure page request handling.\nThis page explains the routing plugin. Extracting information about a request, and generating valid responses inside a route, is described on the requests and responses pages.\n\n```application.install(Routing) {\n    get(\"/\") {\n        call.respondText(\"Hello, World!\")\n    }\n    get(\"/bye\") {\n        call.respondText(\"Good bye, World!\")\n    }\n\n```\n`get`, `post`, `put`, `delete`, `head` and `options` functions are convenience shortcuts to a flexible and powerful routing system. In particular, get is an alias to `route(HttpMethod.Get, path) { handle(body) }`, where body is a lambda passed to the get function.",
        "usage": "## Routing Tree\nRouting is organized in a tree with a recursive matching system that is capable of handling quite complex rules for request processing. The Tree is built with nodes and selectors. The Node contains handlers and interceptors, and the selector is attached to an arc which connects another node. If selector matches current routing evaluation context, the algorithm goes down to the node associated with that selector.\n\nRouting is built using a DSL in a nested manner:\n\n```kotlin\nroute(\"a\") { // matches first segment with the value \"a\"\n  route(\"b\") { // matches second segment with the value \"b\"\n     get {…} // matches GET verb, and installs a handler\n     post {…} // matches POST verb, and installs a handler\n  }\n}\n```\n\n```kotlin\nmethod(HttpMethod.Get) { // matches GET verb\n   route(\"a\") { // matches first segment with the value \"a\"\n      route(\"b\") { // matches second segment with the value \"b\"\n         handle { … } // installs handler\n      }\n   }\n}\n```\nroute resolution algorithms go through nodes recursively discarding subtrees where selector didn't match.\n\nBuilder functions:\n* `route(path)` – adds path segments matcher(s), see below about paths\n* `method(verb)` – adds HTTP method matcher.\n* `param(name, value)` – adds matcher for a specific value of the query parameter\n* `param(name)` – adds matcher that checks for the existence of a query parameter and captures its value\n* `optionalParam(name)` – adds matcher that captures the value of a query parameter if it exists\n* `header(name, value)` – adds matcher that for a specific value of HTTP header, see below about quality\n\n## Path\nBuilding routing tree by hand would be very inconvenient. Thus there is `route` function that covers most of the use cases in a simple way, using path.\n\n`route` function (and respective HTTP verb aliases) receives a `path` as a parameter which is processed to build routing tree. First, it is split into path segments by the `/` delimiter. Each segment generates a nested routing node.\n\nThese two variants are equivalent:\n\n```kotlin\nroute(\"/foo/bar\") { … } // (1)\n\nroute(\"/foo\") {\n   route(\"bar\") { … } // (2)\n}\n```\n### Parameters\nPath can also contain parameters that match specific path segment and capture its value into `parameters` properties of an application call:\n\n```kotlin\nget(\"/user/{login}\") {\n   val login = call.parameters[\"login\"]\n}\n```\nWhen user agent requests `/user/john` using `GET` method, this route is matched and `parameters` property will have `\"login\"` key with value `\"john\"`.\n\n### Optional, Wildcard, Tailcard\nParameters and path segments can be optional or capture entire remainder of URI.\n* `{param?}` –- optional path segment, if it exists it's captured in the parameter\n* `*` –- wildcard, any segment will match, but shouldn't be missing\n* `{...}` –- tailcard, matches all the rest of the URI, should be last. Can be empty.\n* `{param...}` –- captured tailcard, matches all the rest of the URI and puts multiple values for each path segment into `parameters` using `param` as key. Use `call.parameters.getAll(\"param\")` to get all values.\n\nExamples:\n\n```kotlin\nget(\"/user/{login}/{fullname?}\") { … }\nget(\"/resources/{path...}\") { … }\n```\n## Quality\nIt is not unlikely that several routes can match to the same HTTP request.\n\nOne example is matching on the `Accept` HTTP header which can have multiple values with specified priority (quality).\n```kotlin\naccept(ContentType.Text.Plain) { … }\naccept(ContentType.Text.Html) { … }\n```\nThe routing matching algorithm not only checks if a particular HTTP request matches a specific path in a routing tree, but it also calculates the quality of the match and selects the routing node with the best quality. Given the routes above, which match on the Accept header, and given the request header `Accept: text/plain; q=0.5, text/html` will match `text/html` because the quality factor in the HTTP header indicates a lower quality fortext/plain (default is 1.0).\n\nThe Header `Accept: text/plain, text/*` will match `text/plain`. Wildcard matches are considered less specific than direct matches. Therefore the routing matching algorithm will consider them to have a lower quality.\n\nAnother example is making short URLs to named entities, e.g. users, and still being able to prefer specific pages like `\"settings\"`. An example would be\n* `https://twitter.com/kotlin` -– displays user `\"kotlin\"`\n* `https://twitter.com/settings` -- displays settings page\n\nThis can be implemented like this:\n\n```kotlin\nget(\"/{user}\") { … }\nget(\"/settings\") { … }\n```\nThe parameter is considered to have a lower quality than a constant string, so that even if `/settings` matches both, the second route will be selected.\n\n",
        "options": "No options"
    }
}