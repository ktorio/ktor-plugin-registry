{
    "id": "ktor-network-tls",
    "name": "Raw Secure SSL/TLS Sockets",
    "version": "1.5.2",
    "ktor_version": "1.4.0",
    "short_description": "Adds Raw Socket support for listening and connecting to tcp and udp sockets with secure sockets",
    "github": "https://github.com/ktorio/ktor/tree/465b7573fba8ef2293b1d8866b3842504418d6f1/ktor-network/ktor-network-tls/jvm/src/io/ktor/network/tls",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "Sockets",
    "required_feature_ids": [
        "ktor-network"
    ],
    "install_recipe": {
        "imports": [
            "io.ktor.network.selector.*",
            "io.ktor.network.sockets.*",
            "io.ktor.network.tls.*",
            "io.ktor.utils.io.*",
            "io.ktor.utils.io.core.*",
            "kotlinx.coroutines.Dispatchers",
            "kotlinx.coroutines.runBlocking"
        ],
        "install_block": "",
        "templates": [
            {
                "position": "outside_app",
                "text": "object TlsRawSocket {\n    @JvmStatic\n    fun main(args: Array<String>) {\n        runBlocking {\n            val selectorManager = ActorSelectorManager(Dispatchers.IO)\n            val socket = aSocket(selectorManager).tcp().connect(\"www.google.com\", port = 443).tls(coroutineContext = coroutineContext)\n            val write = socket.openWriteChannel()\n            val EOL = \"\\r\\n\"\n            write.writeStringUtf8(\"GET / HTTP/1.1${EOL}Host: www.google.com${EOL}Connection: close${EOL}${EOL}\")\n            write.flush()\n            println(socket.openReadChannel().readRemaining().readBytes().toString(Charsets.UTF_8))\n        }\n    }\n}\n"
            }
        ]
    },
    "dependencies": [
        {
            "group": "io.ktor",
            "artifact": "ktor-network-tls-jvm",
            "version": "$ktor_version"
        }
    ],
    "documentation": {
        "description": "Ktor supports secure sockets. To enable them you will need to include the `io.ktor:ktor-network-tls:$ktor_version` artifact, and call the `.tls()` to a connected socket.\n\n",
        "usage": "Connect to a secure socket:\n\n```kotlin\nrunBlocking {\n    val socket = aSocket(ActorSelectorManager(Dispatchers.IO)).tcp().connect(InetSocketAddress(\"google.com\", 443)).tls()\n    val w = socket.openWriteChannel(autoFlush = false)\n    w.write(\"GET / HTTP/1.1\\r\\n\")\n    w.write(\"Host: google.com\\r\\n\")\n    w.write(\"\\r\\n\")\n    w.flush()\n    val r = socket.openReadChannel()\n    println(r.readUTF8Line())\n}\n```\nYou can adjust a few optional parameters for the TLS connection:\n\n```kotlin\nsuspend fun Socket.tls(\n        trustManager: X509TrustManager? = null,\n        randomAlgorithm: String = \"NativePRNGNonBlocking\",\n        serverName: String? = null,\n        coroutineContext: CoroutineContext = Dispatchers.IO\n): Socket\n```\n",
        "options": "No options"
    }
}