{
    "id": "metrics-micrometer",
    "name": "Micrometer Metrics",
    "version": "1.5.2",
    "ktor_version": "1.4.0",
    "short_description": "Enables Micrometer metrics in your Ktor server application.",
    "github": "https://github.com/ktorio/ktor/blob/4a50c76c3264b0121b91a203d38473bb4aafbace/ktor-features/ktor-metrics-micrometer/jvm/src/io/ktor/metrics/micrometer/MicrometerMetrics.kt",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "Monitoring",
    "required_feature_ids": [
        "routing"
    ],
    "install_recipe": {
        "imports": [
            "io.ktor.features.*",
            "io.micrometer.prometheus.*",
            "io.ktor.metrics.micrometer.*"
        ],
        "install_block": "val appMicrometerRegistry = PrometheusMeterRegistry(PrometheusConfig.DEFAULT)\n\n    install(MicrometerMetrics) {\n        registry = appMicrometerRegistry\n        // ...\n    }",
        "templates": [
            {
                "position": "in_routing",
                "text": "get(\"/metrics-micrometer\") {\n    call.respond(appMicrometerRegistry.scrape())\n}"
            }
        ]
    },
    "dependencies": [
        {
            "group": "io.ktor",
            "artifact": "ktor-metrics-micrometer",
            "version": "$ktor_version"
        },
        {
            "group": "io.micrometer",
            "artifact": "micrometer-registry-prometheus",
            "version": "$prometeus_version",
            "version_value": "1.6.3"
        }
    ],
    "documentation": {
        "description": "The [MicrometerMetrics](https://api.ktor.io/%ktor_version%/io.ktor.metrics.micrometer/-micrometer-metrics/index.html) plugin enables [Micrometer](https://micrometer.io/docs) metrics in your Ktor server application and allows you to choose the required monitoring system, such as Prometheus, JMX, Elastic, and so on. By default, Ktor exposes metrics for monitoring HTTP requests and a set of low-level metrics for [monitoring the JVM][micrometer_jvm_metrics]. You can customize these metrics or create new ones.",
        "usage": "### Install MicrometerMetrics\n\n<var name=\"feature_name\" value=\"MicrometerMetrics\"/>\n<include src=\"lib.md\" include-id=\"install_feature\"/>\n\n#### Exposed Metrics\nKtor exposes the following metrics for monitoring HTTP requests:\n* `ktor.http.server.requests.active`: a [gauge](https://micrometer.io/docs/concepts#_gauges) that counts the amount of concurrent HTTP requests. This metric doesn't provide any tags.\n* `ktor.http.server.requests`: a [timer](https://micrometer.io/docs/concepts#_timers) for measuring the time of each request. This metric provides a set of tags for monitoring request data, including `address` for a requested URL, `method` for an HTTP method, `route` for a Ktor route handling requests, and so on.\n\n> The metric names may be [different](https://micrometer.io/docs/concepts#_naming_meters) depending on the configured monitoring system.\n\nIn addition to HTTP metrics, Ktor exposes a set of metrics for [monitoring the JVM](#jvm_metrics).\n\n### Create a Registry\n\nAfter installing `MicrometerMetrics`, you need to create a [registry for your monitoring system](https://micrometer.io/docs/concepts#_registry) and assign it to the [registry](https://api.ktor.io/%ktor_version%/io.ktor.metrics.micrometer/-micrometer-metrics/-configuration/registry.html) property. In the example below, the `PrometheusMeterRegistry` is created outside the `install` block to have the capability to reuse this registry in different [route handlers](Routing_in_Ktor.md):\n\n```kotlin\nimport io.ktor.features.*\n// ...\nfun Application.module() {\n    val appMicrometerRegistry = PrometheusMeterRegistry(PrometheusConfig.DEFAULT)\n    install(MicrometerMetrics) {\n        registry = appMicrometerRegistry\n    }\n}\n```\n\n### Prometheus: Expose a Scrape Endpoint\nIf you use Prometheus as a monitoring system, you need to expose an HTTP endpoint to the Prometheus scraper. In Ktor, you can do this in the following way:\n1. Create a dedicated [route](Routing_in_Ktor.md) that accepts GET requests by the required address (`/metrics` in the example below).\n1. Use `call.respond` to send scraping data to Prometheus.\n```kotlin\nfun Application.module() {\n    val appMicrometerRegistry = PrometheusMeterRegistry(PrometheusConfig.DEFAULT)\n\n    install(MicrometerMetrics) {\n        registry = appMicrometerRegistry\n        // ...\n    }\n\n    routing {\n        get(\"/metrics\") {\n            call.respond(appMicrometerRegistry.scrape())\n        }\n    }\n}\n```",
        "options": "The `MicrometerMetrics` plugin provides various configuration options that can be accessed using [MicrometerMetrics.Configuration](https://api.ktor.io/%ktor_version%/io.ktor.metrics.micrometer/-micrometer-metrics/-configuration/index.html).\n\n### Timers\nTo customize tags for each timer, you can use the `timers` function that is called for each request:\n```kotlin\ninstall(MicrometerMetrics) {\n    // ...\n    timers { call, exception ->\n        tag(\"region\", call.request.headers[\"regionId\"])\n    }\n}\n```\n\n### Distribution Statistics\nYou configure [distribution statistics](https://micrometer.io/docs/concepts#_configuring_distribution_statistics) using the `distributionStatisticConfig` property, for example:\n```kotlin\ninstall(MicrometerMetrics) {\n    // ...\n    distributionStatisticConfig = DistributionStatisticConfig.Builder()\n                .percentilesHistogram(true)\n                .maximumExpectedValue(Duration.ofSeconds(20).toNanos())\n                .sla(\n                    Duration.ofMillis(100).toNanos(),\n                    Duration.ofMillis(500).toNanos()\n                )\n                .build()\n}\n```\n\n\n### JVM and System Metrics\nIn addition to [HTTP metrics](#ktor_metrics), Ktor exposes a set of metrics for [monitoring the JVM][micrometer_jvm_metrics]. You can customize a list of these metrics using the `meterBinders` property, for example:\n```kotlin\ninstall(MicrometerMetrics) {\n    // ...\n    meterBinders = listOf(\n        JvmMemoryMetrics(),\n        JvmGcMetrics(),\n        ProcessorMetrics()\n    )\n}\n```\nYou can also assign an empty list to disable these metrics at all."
    }
}