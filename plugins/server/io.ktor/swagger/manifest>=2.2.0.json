{
    "id": "swagger",
    "name": "Swagger",
    "version": "2.2.0",
    "ktor_version": "2.2.0-eap-552",
    "short_description": "Serves Swagger UI for your project",
    "github": "https://github.com/ktorio/ktor/blob/main/ktor-server/ktor-server-plugins/ktor-server-swagger/jvm/src/io/ktor/server/plugins/swagger/Swagger.kt",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "HTTP",
    "required_feature_ids": [
        "routing"
    ],
    "install_recipe": {
        "imports": [
            "io.ktor.server.plugins.swagger.*",
            "io.ktor.server.routing.*"
        ],
        "install_block": "routing {\n    swaggerUI(path = \"openapi\")\n}"
    },
    "dependencies": [
        {
            "group": "io.ktor",
            "artifact": "ktor-server-swagger-jvm",
            "version": "$ktor_version"
        }
    ],
    "documentation": {
        "description": "Ktor allows you to generate and serve Swagger UI for your project based on the existing OpenAPI specification. With Swagger UI, you can visualize and interact with the API resources.",
        "usage": "To serve Swagger UI, you need to call the `swaggerUI` method that creates a `GET` endpoint with Swagger UI at the `path` rendered from the OpenAPI specification placed at `swaggerFile`:\n```kotlin\nimport io.ktor.server.plugins.swagger.*\n\nfun Application.main() {\n    routing {\n        swaggerUI(path = \"swagger\", swaggerFile = \"openapi/documentation.yaml\")\n    }\n}\n```\nThis method tries to look up the OpenAPI specification in the application resources. Otherwise, it tries to read the OpenAPI specification from the file system using `java.io.File`.\n\nOptionally, you can customize Swagger UI inside the `swaggerUI` block. For example, you can use another Swagger UI version or apply a custom style.\n```kotlin\nswaggerUI(path = \"swagger\", swaggerFile = \"openapi/documentation.yaml\") {\n     // this: SwaggerConfig\n}\n```\nYou can learn more from [Swagger UI](https://ktor.io/docs/swagger-ui.html).\n\n###Configure CORS\n\nTo make sure your API works nicely with Swagger UI, you need to set up a policy for [Cross-Origin Resource Sharing (CORS)](https://ktor.io/docs/cors.html). The example below applies the following CORS configuration:\n* `anyHost` enables cross-origin requests from any host;\n* `allowHeader` allows the `Content-Type` client header used in [content negotiation](https://ktor.io/docs/serialization.html).\n```kotlin\ninstall(CORS) {\n    anyHost()\n    allowHeader(HttpHeaders.ContentType)\n}\n```",
        "options": ""
    },
    "extra_files": [
        {
            "relative_path": "src/main/resources/openapi/documentation.yaml",
            "content": "openapi: \"3.0.3\"\ninfo:\n  title: \"Application API\"\n  description: \"Application API\"\n  version: \"1.0.0\"\nservers:\n  - url: \"http://0.0.0.0:8080\"\npaths:\n  /:\n    get:\n      description: \"Hello World!\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            text/plain:\n              schema:\n                type: \"string\"\n              examples:\n                Example#1:\n                  value: \"Hello World!\"\ncomponents:\n  schemas:\n"
        }
    ]
}