{
    "id": "auth-digest",
    "name": "Authentication Digest",
    "version": "1.5.2",
    "ktor_version": "1.4.0",
    "short_description": "Handle Digest authentication",
    "github": "https://github.com/ktorio/ktor/blob/e03bafda3b3d72fcac166e46cf55e5d2d9383660/ktor-client/ktor-client-features/ktor-client-auth/common/src/io/ktor/client/features/auth/providers/DigestAuthProvider.kt",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "Security",
    "required_feature_ids": [
        "auth"
    ],
    "install_recipe": {
        "imports": [
            "io.ktor.auth.*"
        ],
        "install_block": "authentication {\n    val myRealm = \"MyRealm\"\n    val usersInMyRealmToHA1: Map<String, ByteArray> = mapOf(\n        // pass=\"test\", HA1=MD5(\"test:MyRealm:pass\")=\"fb12475e62dedc5c2744d98eb73b8877\"\n        \"test\" to hex(\"fb12475e62dedc5c2744d98eb73b8877\")\n    )\n\n    digest(\"myDigestAuth\") {\n        digestProvider { userName, realm ->\n            usersInMyRealmToHA1[userName]\n        }\n    }\n}",
        "templates": [
            {
                "position": "in_routing",
                "text": "authenticate(\"myDigestAuth\") {\n    get(\"/protected/route/digest\") {\n        val principal = call.principal<UserIdPrincipal>()!!\n        call.respondText(\"Hello ${principal.name}\")\n    }\n}"
            }
        ]
    },
    "documentation": {
        "description": "Ktor supports HTTP digest authentication. It works differently than the basic/form auths.",
        "usage": "```kotlin\nauthentication {\n    digest {\n        val password = \"Circle Of Life\"\n        digester = MessageDigest.getInstance(\"MD5\")\n        realm = \"testrealm@host.com\"\n        userNameRealmPasswordDigestProvider = { userName, realm ->\n            when (userName) {\n                \"missing\" -> null\n                else -> {\n                    digester.reset()\n                    digester.update(\"$userName:$realm:$password\".toByteArray())\n                    digester.digest()\n                }\n            }\n        }\n    }\n}\n\n```\nInstead of providing a verifier, you have to provide a `userNameRealmPasswordDigestProvider` that is in charge of returning the `HA1` part of the digest. In the case of `MD5`: `MD5(\"$username:$realm:$password\")`. The idea is that you can store passwords already hashed. And only return the expected hash for a specific user, or null if the user does not exist. The callback is suspendable, so you can retrieve or compute the expected hash asynchronously, for example from disk or a database.\n\n```kotlin\nauthentication {\n    val myRealm = \"MyRealm\"\n    val usersInMyRealmToHA1: Map<String, ByteArray> = mapOf(\n        // pass=\"test\", HA1=MD5(\"test:MyRealm:pass\")=\"fb12475e62dedc5c2744d98eb73b8877\"\n        \"test\" to hex(\"fb12475e62dedc5c2744d98eb73b8877\")\n    )\n\n    digest(\"auth\") {\n        userNameRealmPasswordDigestProvider = { userName, realm ->\n            usersInMyRealmToHA1[userName]\n        }\n    }\n}\n\n```\n`HA1 (H(A1))` comes from RFC 2069 (An Extension to HTTP: Digest Access Authentication)\n\n```\nHA1=MD5(username:realm:password) <-- You usually store this.\nHA2=MD5(method:digestURI)\nresponse=MD5(HA1:nonce:HA2) <-- The client and the server sends and checks this.\n\n```\n",
        "options": "No options"
    }
}