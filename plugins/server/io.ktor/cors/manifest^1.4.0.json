{
    "id": "cors",
    "name": "CORS",
    "version": "1.5.2",
    "ktor_version": "1.4.0",
    "short_description": "Enable Cross-Origin Resource Sharing (CORS)",
    "github": "https://github.com/ktorio/ktor/blob/31dedb3bdaeb1e5f63ba0bfd566e63742ea7a209/ktor-server/ktor-server-core/jvm/src/io/ktor/features/CORS.kt",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "HTTP",
    "install_recipe": {
        "imports": [
            "io.ktor.http.*",
            "io.ktor.features.*"
        ],
        "install_block": "install(CORS) {\n    method(HttpMethod.Options)\n    method(HttpMethod.Put)\n    method(HttpMethod.Delete)\n    method(HttpMethod.Patch)\n    header(HttpHeaders.Authorization)\n    header(\"MyCustomHeader\")\n    anyHost() // @TODO: Don't do this in production if possible. Try to limit it.\n}"
    },
    "documentation": {
        "description": "Ktor by default provides an interceptor for implementing proper support for Cross-Origin Resource Sharing (`CORS`).\n\n",
        "usage": "## Basic usage:\nFirst of all, install the `CORS` plugin into your application.\n\n```kotlin\nfun Application.main() {\n  ...\n  install(CORS)\n  ...\n}\n```\nThe default configuration to the CORS plugin handles only `GET`, `POST` and `HEAD` HTTP methods and the following headers:\n\n```\nHttpHeaders.Accept\nHttpHeaders.AcceptLanguages\nHttpHeaders.ContentLanguage\nHttpHeaders.ContentType\n```\n## Advanced usage:\nHere is an advanced example that demonstrates most of CORS-related API functions\n\n```kotlin\nfun Application.main() {\n  ...\n  install(CORS)\n  {\n    method(HttpMethod.Options)\n    header(HttpHeaders.XForwardedProto)\n    anyHost()\n    host(\"my-host\")\n    // host(\"my-host:80\")\n    // host(\"my-host\", subDomains = listOf(\"www\"))\n    // host(\"my-host\", schemes = listOf(\"http\", \"https\"))\n    allowCredentials = true\n    allowNonSimpleContentTypes = true\n    maxAge = Duration.ofDays(1)\n  }\n  ...\n}\n```\n",
        "options": "* `method(\"HTTP_METHOD\")` : Includes this method to the white list of Http methods to use CORS.\n* `header(\"header-name\")` : Includes this header to the white list of headers to use CORS.\n* `exposeHeader(\"header-name\")` : Exposes this header in the response.\n* `exposeXHttpMethodOverride()` : Exposes `X-Http-Method-Override` header in the response\n* `anyHost()` : Allows any host to access the resources\n* `host(\"hostname\")` : Allows only the specified host to use `CORS`, it can have the port number, a list of subDomains or the supported schemes.\n* `allowCredentials` : Includes `Access-Control-Allow-Credentials` header in the response\n* `allowNonSimpleContentTypes`: Inclues `Content-Type` request header to the white list for values other than simple content types.\n* `maxAge`: Includes `Access-Control-Max-Age` header in the response with the given max age"
    }
}