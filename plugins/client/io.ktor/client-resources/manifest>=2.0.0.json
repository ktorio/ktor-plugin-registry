{
    "id": "client-resources",
    "name": "Resources",
    "version": "2.0.0",
    "ktor_version": "2.0.0",
    "short_description": "Allows you to implement type-safe requests",
    "github": "https://github.com/ktorio/ktor/blob/main/ktor-client/ktor-client-plugins/ktor-client-resources/common/src/io/ktor/client/plugins/resources/Resources.kt",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "HTTP",
    "install_recipe": {
        "imports": [
            "io.ktor.client.plugins.resources.*",
            "io.ktor.resources.*"
        ],
        "install_block": "install(Resources)"
    },
    "dependencies": [
        {
            "group": "io.ktor",
            "artifact": "ktor-client-resources",
            "version": "$ktor_version"
        }
    ],
    "documentation": {
        "description": "Ktor provides the `Resources` plugin that allows you to implement type-safe requests. To accomplish this, you need to create a class that describes resources available on a server and then annotate this class using the `@Resource` keyword. Such classes should also have the `@Serializable` annotation provided by the kotlinx.serialization library.",
        "usage": "To install `Resources`, pass it to the `install` function inside a [client configuration block](create-client.md#configure-client):\n```kotlin\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.resources.*\n//...\nval client = HttpClient(CIO) {\n    install(Resources)\n}\n```\n### Create resource classes\n\nEach resource class should have the following annotations:\n\n* The `@Serializable` annotation, which is provided by the kotlinx.serialization library.\n* The `@Resource` annotation.\n\nBelow we'll take a look at several examples of resource classes - defining a single path segment, query and path parameters, and so on.\n\n###### Resource URL\n\nThe example below shows how to define the `Articles` class that specifies a resource responding on the `/articles` path.\n\n```kotlin\nimport io.ktor.resources.*\n\n@Serializable\n@Resource(\"/articles\")\nclass Articles()\n```\n\n###### Resources with a query parameter\n\nThe `Articles` class below has the sort string property that acts as a query parameter and allows you to define a resource responding on the following path with the sort query parameter: `/articles?sort=new`.\n\n```kotlin\n@Serializable\n@Resource(\"/articles\")\nclass Articles(val sort: String? = \"new\")\n```\nNote that properties can be primitives or types annotated with the `@Serializable` annotation.\n\n",
        "options": ""
    },
    "target": "client"
}