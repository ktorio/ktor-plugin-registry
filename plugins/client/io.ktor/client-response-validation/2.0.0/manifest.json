{
    "id": "client-response-validation",
    "name": "Response Validation",
    "version": "2.0.0",
    "ktor_version": "2.0.0",
    "short_description": "Validates responses depending on their status codes",
    "github": "https://github.com/ktorio/ktor-documentation/tree/main/codeSnippets/snippets/client-retry",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "HTTP",
    "install_recipe": {
        "imports": [
            "io.ktor.client.plugins.*"
        ],
        "install_block": "HttpResponseValidator {\n    validateResponse { response ->\n        val error: Error = response.body()\n        if (error.code != 0) {\n            throw CustomResponseException(response, \"Code: ${error.code}, message: ${error.message}\")\n        }\n    }\n}"
    },
    "documentation": {
        "description": "By default, Ktor doesn't validate a response depending on its status code. If required, you can use the following validation strategies:\n\n* Use the `expectSuccess` property to throw exceptions for non-2xx responses.\n* Add stricter validation of 2xx responses.\n* Customize validation of non-2xx responses.\n\n",
        "usage": "Ktor allows you to enable default validation by setting the `expectSuccess` property to `true`. This can be done on a client configuration level ...\n\n```kotlin\nimport io.ktor.client.*\nimport io.ktor.client.engine.cio.*\n\nval client = HttpClient(CIO) {\n    expectSuccess = true\n}\n```... or by using the same property on a request level.\n\n### Custom validation\n\nYou can add additional validation for 2xx responses or customize default validation by using the `HttpCallValidator` plugin. To install `HttpCallValidator`, call the `HttpResponseValidator` function inside a client configuration block:\n\n```kotlin\nval client = HttpClient(CIO) {\n    HttpResponseValidator {\n        // ...\n    }\n}\n```###### Validate 2xx responses\n\nAs mentioned above, default validation throws exceptions for non-2xx error responses. If you need to add stricter validation and check 2xx responses, use the `validateResponse` function available in `HttpCallValidator`.\n\nIn the example below, a client receives a 2xx response with error details in a `JSON` format. The `validateResponse` is used to raise a `CustomResponseException`:\n\n```kotlin\nval client = HttpClient(CIO) {\n    install(ContentNegotiation) { json() }\n    HttpResponseValidator {\n        validateResponse { response ->\n            val error: Error = response.body()\n            if (error.code != 0) {\n                throw CustomResponseException(response, \"Code: ${error.code}, message: ${error.message}\")\n            }\n        }\n    }\n}\n```",
        "options": ""
    },
    "target": "client"
}