{
    "id": "client-auth-basic",
    "name": "Authentication Basic",
    "version": "2.0.0",
    "ktor_version": "2.0.0",
    "short_description": "Can be used for logging in users",
    "github": "https://github.com/ktorio/ktor-documentation/tree/main/codeSnippets/snippets/client-auth-basic",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "HTTP",
    "install_recipe": {
        "imports": [
            "io.ktor.client.plugins.auth.*",
            "io.ktor.client.plugins.auth.providers.*"
        ],
        "install_block": "install(Auth) {\n    basic {\n        credentials {\n            BasicAuthCredentials(username = \"jetbrains\", password = \"foobar\")\n        }\n        realm = \"Access to the '/' path\"\n    }\n}"
    },
    "dependencies": [
        {
            "group": "io.ktor",
            "artifact": "ktor-client-auth",
            "version": "$ktor_version"
        }
    ],
    "documentation": {
        "description": "The Basic [authentication scheme](auth.md) can be used for logging in users. In this scheme, user credentials are transmitted as username/password pairs encoded using Base64.\n\nThe basic authentication flow looks as follows:\n\n1. A client makes a request without the `Authorization` header to a specific resource in a server application.\n2. A server responds to a client with a `401` (Unauthorized) response status and uses a `WWW-Authenticate` response header to provide information that the basic authentication scheme is used to protect a route. A typical `WWW-Authenticate` header looks like this:\n\n   ```\n   WWW-Authenticate: Basic realm=\"Access to the '/' path\", charset=\"UTF-8\"\n   ```\n   {style=\"block\"}\n\n   The Ktor client allows you to send credentials without waiting the `WWW-Authenticate` header using the `sendWithoutRequest` function.\n\n4. Usually a client displays a login dialog where a user can enter credentials. Then, a client makes a request with the `Authorization` header containing a username and password pair encoded using Base64, for example:\n\n   ```\n   Authorization: Basic amV0YnJhaW5zOmZvb2Jhcg\n   ```\n   {style=\"block\"}\n\n5. A server validates credentials sent by the client and responds with the requested content.",
        "usage": "To send user credentials in the `Authorization` header using the `Basic` scheme, you need to configure the `basic` authentication provider as follows:\n\n1. Call the [basic](https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/basic.html) function inside the `install` block.\n2. Provide the required credentials using [BasicAuthCredentials](https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/-basic-auth-credentials/index.html) and pass this object to the [credentials](https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/-basic-auth-config/credentials.html) function.\n3. Configure the realm using the `realm` property.\n\n   ```kotlin\nval client = HttpClient(CIO) {\n    install(Auth) {\n        basic {\n            credentials {\n                BasicAuthCredentials(username = \"jetbrains\", password = \"foobar\")\n            }\n            realm = \"Access to the '/' path\"\n        }\n    }\n}```\n\n4. Optionally, enable sending credentials in the initial request without waiting for a `401` (Unauthorized) response with the `WWW-Authenticate` header. You need to call the `sendWithoutRequest` function returning boolean and check the request parameters.\n\n   ```kotlin\n   install(Auth) {\n       basic {\n           // ...\n           sendWithoutRequest { request ->\n               request.url.host == \"0.0.0.0\"\n           }\n       }\n   }\n   ```\n",
        "options": ""
    },
    "target": "client"
}