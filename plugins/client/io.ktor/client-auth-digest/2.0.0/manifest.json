{
    "id": "client-auth-digest",
    "name": "Authentication Digest",
    "version": "2.0.0",
    "ktor_version": "2.0.0",
    "short_description": "Authentication with a hash function applied to username and password",
    "github": "https://github.com/ktorio/ktor-documentation/tree/main/codeSnippets/snippets/client-auth-digest",
    "copyright": "Apache 2.0",
    "vendor": {
        "name": "Ktor",
        "url": "https://ktor.io/"
    },
    "group": "HTTP",
    "install_recipe": {
        "imports": [
            "io.ktor.client.plugins.auth.*",
            "io.ktor.client.plugins.auth.providers.*"
        ],
        "install_block": "install(Auth) {\n    digest {\n        credentials {\n            DigestAuthCredentials(username = \"jetbrains\", password = \"foobar\")\n        }\n        realm = \"Access to the '/' path\"\n    }\n}"
    },
    "dependencies": [
        {
            "group": "io.ktor",
            "artifact": "ktor-client-auth",
            "version": "$ktor_version"
        }
    ],
    "documentation": {
        "description": "In the Digest authentication scheme, a hash function is applied to a username and password before sending them over the network. \n\nThe digest authentication flow looks as follows:\n\n1. A client makes a request without the `Authorization` header to a specific resource in a server application.\n2. A server responds to a client with a `401` (Unauthorized) response status and uses a `WWW-Authenticate` response header to provide information that the digest authentication scheme is used to protect a route. A typical `WWW-Authenticate` header looks like this:\n\n   ```\n   WWW-Authenticate: Digest\n           realm=\"Access to the '/' path\",\n           nonce=\"e4549c0548886bc2\",\n           algorithm=\"MD5\"\n   ```\n   {style=\"block\"}\n\n3. Usually a client displays a login dialog where a user can enter credentials. Then, a client makes a request with the following `Authorization` header:\n\n   ```\n   Authorization: Digest username=\"jetbrains\",\n           realm=\"Access to the '/' path\",\n           nonce=\"e4549c0548886bc2\",\n           uri=\"/\",\n           algorithm=MD5,\n           response=\"6299988bb4f05c0d8ad44295873858cf\"\n   ```\n   {style=\"block\"}\n\n   The `response` value is generated in the following way:\n\n   a. `HA1 = MD5(username:realm:password)`\n\n   b. `HA2 = MD5(method:digestURI)`\n\n   c. `response = MD5(HA1:nonce:HA2)`\n\n4. A server validates credentials sent by the client and responds with the requested content.",
        "usage": "To send user credentials in the `Authorization` header using the `Digest` scheme, you need to configure the `digest` authentication provider as follows:\n\n1. Call the [digest](https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/digest.html) function inside the `install` block.\n2. Provide the required credentials using [DigestAuthCredentials](https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/-digest-auth-credentials/index.html) and pass this object to the [credentials](https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/-digest-auth-config/credentials.html) function.\n3. Optionally, configure the realm using the `realm` property.\n\n\n```kotlin\nval client = HttpClient(CIO) {\n    install(Auth) {\n        digest {\n            credentials {\n                DigestAuthCredentials(username = \"jetbrains\", password = \"foobar\")\n            }\n            realm = \"Access to the '/' path\"\n        }\n    }\n}```\n",
        "options": ""
    },
    "target": "client"
}